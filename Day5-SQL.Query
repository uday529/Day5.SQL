OUTER JOINS:
THERE ARE DIFFERENT KINDS OF OUTER JOINS
LEFT OUTER JOIN
RIGHT OUTER JOIN
FULL OUTER JOIN


RIGHT OUTER JOIN
DISPLAY THE COMMON DATA DATA FROM 2 TABLES AND EXTRA DATA WILL BE DISPLAYED FROM RIGHT TABLE

SELECT L1.BOOK_CODE,L1.BOOK_TITLE,L2.SUPPLIER_NAME,L2.SUPPLIER_ID FROM 
LMS_BOOK_DETAILS AS L1 RIGHT OUTER JOIN LMS_SUPLLIERS_DETAILS AS L2
ON L1.SUPPLIER_ID = L2.SUPPLIER_ID;               // WE GET THE EXTRA DATA FROM RIGHT SIDE TABLE AND ALL COLUMNS WOULB E NULL IF THE DATA IS NOT PRESENT//

LEFT OUTER JOIN:
SELECT L1.BOOK_CODE,L1.BOOK_TITLE,L2.SUPPLIER_NAME,L2.SUPPLIER_ID FROM 
LMS_BOOK_DETAILS AS L1 LEFT OUTER JOIN LMS_SUPLLIERS_DETAILS AS L2
ON L1.SUPPLIER_ID = L2.SUPPLIER_ID;      // EXTRA DATA .NET BOOK WILL BE ADDED BUT THERE IS NO SUPLLIER PRESENT SO IT WILL BE DISPLAYED AS NULL //

SELECT L1.BOOK_CODE,L1.BOOK_TITLE,L2.SUPPLIER_NAME,L2.SUPPLIER_ID FROM 
LMS_BOOK_DETAILS AS L1 FULL OUTER JOIN LMS_SUPLLIERS_DETAILS AS L2
ON L1.SUPPLIER_ID = L2.SUPPLIER_ID;  // FROM BOT TABLES THE EXTRA DATA WILL BE ADDED //

WE CAN USE WHERE ,GROUP BYCLUASE IN THE JOINS 
-------------------------------------------------------------------------------------------------------------------------------------------------------------
HAVING CLAUSE:
 FIND  THE SUPLLIER DETAILS WHO HAS SUPLLIED MAX NUM OF BOOKS 

SELECT SUPPLIER_ID,MAX(COUNT(SUPPLIER_ID)) FROM LMS_BOOK_DETAILS
GROUP BY SUPPLIER_ID;  // WE GET THE ERROR AS WE CANT PERFORM AN AGGREGATE FUNCTION ON EXPRESSION CONTAINING AGGREGATE FUNCTION //

SELECT COUNT(SUPPLIER_ID) FROM LMS_BOOK_DETAILS GROUP BY
HAVING COUNT(SUPPLIER_ID)>=ALL(
SELECT COUNT(SUPPLIER_ID) FROM LMS_BOOK_DETAILS
GROUP BY SUPPLIER_ID);                             SUBQUERY: 4,3,1  ALL(0,4,3,1) >=ALL(0,4,3,1)

// WE HAVE TO USE HAVING AFTER GROUP BY BECAUSE IN ALL THE OTHER CASES THE CASE MAY NOT BE CORRECT//
DISPLAY THE MEMBER_ID WHO HAS TAKEN LESS THAN OR EQUAL TO 2 BOOKS 

SELECT MEMBER_ID,COUNT(BOOK_CODE) FROM LMS_BOOK_ISSUE 
GROUP BY MEMBER_ID HAVING COUNT(BOOK_CODE)<=2;

SELECT MEMBER_NAME,COUNT(BOOK_CODE) AS BOOKScOUNT FROM LMS_BOOK_ISSUE AS L1 JOIN 
LMS_MEMBERS AS L2 ON L1.MEMBER_ID=L2.MEMBER_ID WHERE MEMBER_NAME LIKE 'A%'
GROUP BY MEMBER_NAME HAVING COUNT(BOOK_CODE)<2 ORDER BY MEMBER_NAME DESC;
------------------------------------------------------------------------------------------------------------------------------------------------------------
SELECT * FROM (SELECT FIRST_NAME,SALARY,DENSE_RANK() OVER(ORDER BY SALARY DESC) R FROM EMPLOYEE) AS E WHERE R=1;
DENSE_RANK IS INBUILT FUNCTION THAT DISPLAY THE RANK OF THE DATA BASED THE CONDITION
